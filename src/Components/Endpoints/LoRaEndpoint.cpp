//------------------------------------------------------------------------------------------------
// File: LoRaEndpoint.cpp
// Description:
//------------------------------------------------------------------------------------------------
#include "LoRaEndpoint.hpp"
//------------------------------------------------------------------------------------------------
#include "EndpointConstants.hpp"
#include "../../Utilities/Message.hpp"
//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
namespace {
//------------------------------------------------------------------------------------------------
namespace local {
//------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------
} // local namespace
//------------------------------------------------------------------------------------------------
} // namespace
//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------

Endpoints::CLoRaEndpoint::CLoRaEndpoint(
    IMessageSink* const messageSink,
    Configuration::TEndpointOptions const& options)
    : CEndpoint(messageSink, options)
{
}

//------------------------------------------------------------------------------------------------

Endpoints::CLoRaEndpoint::~CLoRaEndpoint()
{
    bool const success = Shutdown();
    if (!success) {
        m_worker.detach();
    }
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
 // Description:
 //------------------------------------------------------------------------------------------------
std::string Endpoints::CLoRaEndpoint::GetProtocolType() const
{
    return ProtocolType.data();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
 // Description:
 //------------------------------------------------------------------------------------------------
NodeUtils::TechnologyType Endpoints::CLoRaEndpoint::GetInternalType() const
{
    return InternalType;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::Startup()
{
    if (m_active) {
        return; 
    }
    Spawn();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::HandleProcessedMessage(
    [[maybe_unused]] NodeUtils::NodeIdType id, [[maybe_unused]] CMessage const& message)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::Send(
    [[maybe_unused]] NodeUtils::NodeIdType id, [[maybe_unused]] CMessage const& message)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::Send(
    [[maybe_unused]] NodeUtils::NodeIdType id, [[maybe_unused]] std::string_view message)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
bool Endpoints::CLoRaEndpoint::Shutdown()
{
    {
        std::scoped_lock lock(m_mutex);
        m_terminate = true;
    }

    m_cv.notify_all();
    
    if (m_worker.joinable()) {
        m_worker.join();
    }
    
    return !m_worker.joinable();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::Spawn()
{
    printo("[LoRa] Spawning endpoint thread", NodeUtils::PrintType::Endpoint);
}

//------------------------------------------------------------------------------------------------
