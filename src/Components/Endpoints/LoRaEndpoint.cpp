//------------------------------------------------------------------------------------------------
// File: LoRaEndpoint.cpp
// Description:
//------------------------------------------------------------------------------------------------
#include "LoRaEndpoint.hpp"
//------------------------------------------------------------------------------------------------
#include "EndpointDefinitions.hpp"
#include "../../BryptMessage/ApplicationMessage.hpp"
//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
namespace {
//------------------------------------------------------------------------------------------------
namespace local {
//------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------
} // local namespace
//------------------------------------------------------------------------------------------------
} // namespace
//------------------------------------------------------------------------------------------------

Endpoints::CLoRaEndpoint::CLoRaEndpoint(
    BryptIdentifier::SharedContainer const& spBryptIdentifier,
    std::string_view interface,
    Endpoints::OperationType operation,
    IEndpointMediator const* const pEndpointMediator,
    IPeerMediator* const pPeerMediator)
    : CEndpoint(
        spBryptIdentifier, interface, operation,
        pEndpointMediator, pPeerMediator, TechnologyType::LoRa)
{
}

//------------------------------------------------------------------------------------------------

Endpoints::CLoRaEndpoint::~CLoRaEndpoint()
{
    bool const success = Shutdown();
    if (!success) {
        m_worker.detach();
    }
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
Endpoints::TechnologyType Endpoints::CLoRaEndpoint::GetInternalType() const
{
    return InternalType;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
std::string Endpoints::CLoRaEndpoint::GetProtocolType() const
{
    return ProtocolType.data();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
// Returns:
//------------------------------------------------------------------------------------------------
std::string Endpoints::CLoRaEndpoint::GetEntry() const
{
    return "";
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
// Returns:
//------------------------------------------------------------------------------------------------
std::string Endpoints::CLoRaEndpoint::GetURI() const
{
    return Scheme.data() + GetEntry();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::Startup()
{
    if (m_active) {
        return; 
    }
    Spawn();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
bool Endpoints::CLoRaEndpoint::Shutdown()
{
    if (!m_active) {
        return true;
    }

    NodeUtils::printo("[LoRa] Shutting down endpoint", NodeUtils::PrintType::Endpoint);

    m_terminate = true; // Stop the worker thread from processing the connections
    m_cv.notify_all(); // Notify the worker that exit conditions have been set
    
    if (m_worker.joinable()) {
        m_worker.join();
    }
    
    return !m_worker.joinable();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::ScheduleBind([[maybe_unused]] std::string_view binding)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::ScheduleConnect([[maybe_unused]] std::string_view entry)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
bool Endpoints::CLoRaEndpoint::ScheduleSend(
    [[maybe_unused]] BryptIdentifier::CContainer const& identifier,
    [[maybe_unused]] std::string_view message)
{
    return false;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::Spawn()
{
    printo("[LoRa] Spawning endpoint thread", NodeUtils::PrintType::Endpoint);
}

//------------------------------------------------------------------------------------------------
