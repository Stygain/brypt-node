//------------------------------------------------------------------------------------------------
// File: LoRaEndpoint.cpp
// Description:
//------------------------------------------------------------------------------------------------
#include "LoRaEndpoint.hpp"
//------------------------------------------------------------------------------------------------
#include "EndpointDefinitions.hpp"
#include "../../Utilities/Message.hpp"
//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
namespace {
//------------------------------------------------------------------------------------------------
namespace local {
//------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------
} // local namespace
//------------------------------------------------------------------------------------------------
} // namespace
//------------------------------------------------------------------------------------------------

Endpoints::CLoRaEndpoint::CLoRaEndpoint(
    NodeUtils::NodeIdType id,
    std::string_view interface,
    Endpoints::OperationType operation,
    IMessageSink* const messageSink)
    : CEndpoint(id, interface, operation, messageSink, TechnologyType::LoRa)
{
    if (m_messageSink) {
        auto callback = [this] (CMessage const& message) -> bool { return ScheduleSend(message); };  
        m_messageSink->RegisterCallback(m_identifier, callback);
    }
}

//------------------------------------------------------------------------------------------------

Endpoints::CLoRaEndpoint::~CLoRaEndpoint()
{
    bool const success = Shutdown();
    if (!success) {
        m_worker.detach();
    }
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
Endpoints::TechnologyType Endpoints::CLoRaEndpoint::GetInternalType() const
{
    return InternalType;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
std::string Endpoints::CLoRaEndpoint::GetProtocolType() const
{
    return ProtocolType.data();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
// Returns:
//------------------------------------------------------------------------------------------------
std::string Endpoints::CLoRaEndpoint::GetEntry() const
{
    return "";
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::ScheduleBind([[maybe_unused]] std::string_view binding)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::ScheduleConnect([[maybe_unused]] std::string_view entry)
{
}

//------------------------------------------------------------------------------------------------


//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::Startup()
{
    if (m_active) {
        return; 
    }
    Spawn();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
bool Endpoints::CLoRaEndpoint::ScheduleSend([[maybe_unused]] CMessage const& message)
{
    // Forward the message pack to be sent on the socket
    return ScheduleSend(message.GetDestinationId(), message.GetPack());
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
bool Endpoints::CLoRaEndpoint::ScheduleSend(
    [[maybe_unused]] NodeUtils::NodeIdType id, [[maybe_unused]] std::string_view message)
{
    return false;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
bool Endpoints::CLoRaEndpoint::Shutdown()
{
    if (!m_active) {
        return true;
    }

    NodeUtils::printo("[LoRa] Shutting down endpoint", NodeUtils::PrintType::Endpoint);
    if (m_messageSink) {
        m_messageSink->UnpublishCallback(m_identifier);
    }

    m_terminate = true; // Stop the worker thread from processing the connections
    m_cv.notify_all(); // Notify the worker that exit conditions have been set
    
    if (m_worker.joinable()) {
        m_worker.join();
    }
    
    return !m_worker.joinable();
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Endpoints::CLoRaEndpoint::Spawn()
{
    printo("[LoRa] Spawning endpoint thread", NodeUtils::PrintType::Endpoint);
}

//------------------------------------------------------------------------------------------------
