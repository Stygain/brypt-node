//------------------------------------------------------------------------------------------------
// File: LoRaConnection.cpp
// Description:
//------------------------------------------------------------------------------------------------
#include "LoRaConnection.hpp"
#include "../../Utilities/Message.hpp"
//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
namespace {
//------------------------------------------------------------------------------------------------
namespace local {
//------------------------------------------------------------------------------------------------

// constexpr std::chrono::nanoseconds timeout = std::chrono::nanoseconds(1000);

//------------------------------------------------------------------------------------------------
} // local namespace
//------------------------------------------------------------------------------------------------
} // namespace
//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------

Connection::CLoRa::CLoRa(
    IMessageSink* const messageSink,
    Configuration::TConnectionOptions const& options)
    : CConnection(messageSink, options)
{
}

//------------------------------------------------------------------------------------------------

Connection::CLoRa::~CLoRa()
{
    bool const success = Shutdown();
    if (!success) {
        m_worker.detach();
    }
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::whatami()
{
    NodeUtils::printo("[LoRa] I am a LoRa implementation", NodeUtils::PrintType::Connection);
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Spawn()
{
    NodeUtils::printo("[LoRa] Spawning LoRa connection thread", NodeUtils::PrintType::Connection);
    m_worker = std::thread(&CLoRa::Worker, this);
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
 // Description:
 //------------------------------------------------------------------------------------------------
std::string const& Connection::CLoRa::GetProtocolType() const
{
    static std::string const protocol = "LoRa";
    return protocol;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
 // Description:
 //------------------------------------------------------------------------------------------------
NodeUtils::TechnologyType Connection::CLoRa::GetInternalType() const
{
    static NodeUtils::TechnologyType const internal = NodeUtils::TechnologyType::LoRa;
    return internal;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Worker()
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::HandleProcessedMessage(CMessage const& /*message*/)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Send(CMessage const& /*message*/)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Send(std::string_view /*message*/)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
// Returns:
//------------------------------------------------------------------------------------------------
std::optional<std::string> Connection::CLoRa::Receive([[maybe_unused]] std::int32_t flag)
{
    return {};
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::PrepareForNext()
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
bool Connection::CLoRa::Shutdown()
{    // Stop the worker thread from processing the connections
    {
        std::scoped_lock lock(m_mutex);
        m_terminate = true;
    }

    m_cv.notify_all();
    
    if (m_worker.joinable()) {
        m_worker.join();
    }
    
    return !m_worker.joinable();
}

//------------------------------------------------------------------------------------------------
