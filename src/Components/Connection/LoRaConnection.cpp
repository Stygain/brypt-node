//------------------------------------------------------------------------------------------------
// File: LoRaConnection.cpp
// Description:
//------------------------------------------------------------------------------------------------
#include "LoRaConnection.hpp"
#include "../../Utilities/Message.hpp"
//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------

Connection::CLoRa::CLoRa()
    : CConnection()
{
}

//------------------------------------------------------------------------------------------------

Connection::CLoRa::CLoRa(NodeUtils::TOptions const& options)
    : CConnection(options)
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::whatami()
{
    printo("[LoRa] I am a LoRa implementation", NodeUtils::PrintType::CONNECTION);
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Spawn()
{
    printo("[LoRa] Spawning LoRa connection thread", NodeUtils::PrintType::CONNECTION);
    m_workerThread = std::thread(&CLoRa::Worker, this);
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
 // Description:
 //------------------------------------------------------------------------------------------------
std::string const& Connection::CLoRa::GetProtocolType() const
{
    static std::string const protocol = "LoRa";
    return protocol;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
 // Description:
 //------------------------------------------------------------------------------------------------
NodeUtils::TechnologyType const& Connection::CLoRa::GetInternalType() const
{
    static NodeUtils::TechnologyType const internal = NodeUtils::TechnologyType::LORA;
    return internal;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Worker()
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
 // Description:
 // Returns:
 //------------------------------------------------------------------------------------------------
std::optional<std::string> Connection::CLoRa::Receive([[maybe_unused]] std::int32_t flag)
{
    return "";
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Send(CMessage const& message)
{
    (void)message;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Send(char const* const message)
{
    (void)message;
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::PrepareForNext()
{
}

//------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// Description:
//------------------------------------------------------------------------------------------------
void Connection::CLoRa::Shutdown()
{
}

//------------------------------------------------------------------------------------------------
